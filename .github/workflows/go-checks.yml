# Reusable Go Checks workflow
# This workflow performs comprehensive Go code quality checks including vet, static analysis, linting, vulnerability checks, and security checks

name: Go Checks

on:
  pull_request:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: false
        type: string
        default: 'stable'
      working-directory:
        description: 'Working directory for the Go project'
        required: false
        type: string
        default: '.'
    secrets:
      github-token:
        description: 'GitHub token for accessing private repositories'
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Vet:
    runs-on: ubuntu-latest
    steps:
    - name: Setup
      uses: ./.github/workflows/go-checks.yml@setup
        
    - name: Vet
      run: go vet ./...
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: false
      
  Static-Analysis:
    runs-on: ubuntu-latest
    steps:
    - name: Setup
      uses: ./.github/workflows/go-checks.yml@setup

    - name: Install staticcheck
      uses: ./.github/workflows/go-checks.yml@install-tool
      with:
        tool-name: staticcheck
        tool-package: honnef.co/go/tools/cmd/staticcheck

    - name: Static analysis
      run: staticcheck ./...
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: false

  Lint:
    runs-on: ubuntu-latest
    steps:
    - name: Setup
      uses: ./.github/workflows/go-checks.yml@setup

    - name: Install golangci-lint
      uses: ./.github/workflows/go-checks.yml@install-tool
      with:
        tool-name: golangci-lint
        tool-package: github.com/golangci/golangci-lint/cmd/golangci-lint

    - name: Lint
      run: golangci-lint run ./...
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: false

  Vulnerability-Check:
    runs-on: ubuntu-latest
    steps:
    - name: Setup
      uses: ./.github/workflows/go-checks.yml@setup

    - name: Install govulncheck
      uses: ./.github/workflows/go-checks.yml@install-tool
      with:
        tool-name: govulncheck
        tool-package: golang.org/x/vuln/cmd/govulncheck

    - name: Vulnerability check
      run: govulncheck ./...
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: false

  Security-Check:
    runs-on: ubuntu-latest
    steps:
    - name: Setup
      uses: ./.github/workflows/go-checks.yml@setup

    - name: Install gosec
      uses: ./.github/workflows/go-checks.yml@install-tool
      with:
        tool-name: gosec
        tool-package: github.com/securego/gosec/v2/cmd/gosec

    - name: Security check
      run: gosec ./...
      working-directory: ${{ inputs.working-directory }}
      continue-on-error: false

# Composite action definitions
setup:
  name: 'Setup Go Environment'
  description: 'Setup Go environment with checkout and Go installation'
  runs:
    using: 'composite'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          check-latest: true

install-tool:
  name: 'Install and Cache Go Tool'
  description: 'Install and cache a Go tool, ensuring latest version'
  inputs:
    tool-name:
      description: 'Name of the tool to install'
      required: true
    tool-package:
      description: 'Go package path for the tool'
      required: true
  runs:
    using: 'composite'
    steps:
      - name: Cache ${{ inputs.tool-name }}
        uses: actions/cache@v4
        with:
          path: ~/go/bin/${{ inputs.tool-name }}
          key: ${{ inputs.tool-name }}-${{ runner.os }}-latest
          restore-keys: |
            ${{ inputs.tool-name }}-${{ runner.os }}-

      - name: Install ${{ inputs.tool-name }}
        shell: bash
        run: |
          if [ ! -f ~/go/bin/${{ inputs.tool-name }} ]; then
            go install ${{ inputs.tool-package }}@latest
          else
            # Update to latest version
            go install ${{ inputs.tool-package }}@latest
          fi